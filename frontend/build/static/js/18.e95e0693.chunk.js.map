{"version":3,"sources":["component/admin/forms/questions.create.js","action/questionAction.js","containers/admin/createQuestion.js","layouts/admin-dashboard.layout.js","action/testAction.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["React","memo","selectTest","setSelectTest","testList","questions","questionChangeHandler","marksChangeHandler","deleteQuestionHandler","checkboxChangeHandler","answerChangeHandler","addQuestionHandler","submitForm","className","value","id","onChange","e","find","test","target","length","map","name","totalMarks","count","question","Number","marks","i","placeholder","type","required","onClick","answers","answer","i2","checked","correct","create","fetch","API","method","headers","Accept","body","JSON","stringify","then","res","json","catch","err","initialQuestionModel","useState","setTestList","setQuestions","a","preventDefault","alert","testId","useEffect","read","getAllTests","title","questionObj","questionIndex","filter","q","index","answerIndex","withRouter","children","history","href","src","logo","alt","signout","push","to","getTestQuestions","destroy","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"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","file":"static/js/18.e95e0693.chunk.js","sourcesContent":["import React from 'react'\n\nexport default React.memo((\n    {\n        selectTest,\n        setSelectTest,\n        testList,\n        questions,\n        questionChangeHandler,\n        marksChangeHandler,\n        deleteQuestionHandler,\n        checkboxChangeHandler,\n        answerChangeHandler,\n        addQuestionHandler,\n        submitForm\n    }\n) =>\n\n    <div className=\"row\">\n        <div className=\"col-md-12 col-lg-12 col-sm-12\">\n            <div className=\"white-box\">\n                {/* test selection */}\n                <div className=\"mb-3\">\n                    <h3 className=\"box-title mb-0\">Create Questions for Test</h3>\n                    <br />\n                    <div className=\"w-25\">\n                        <span className=\"text-bold\">Choose a Test:</span>\n                        {/* select test */}\n                        <select className=\"form-select shadow-none border-top\"\n                            value={selectTest ? selectTest.id : null}\n                            onChange={e => setSelectTest(\n                                testList.find(test => test.id == e.target.value)\n                            )}>\n                            {testList.length &&\n                                testList.map(test =>\n                                    <option key={test.id} value={test.id}>{test.name}</option>\n                                )\n                            }\n                        </select>\n                        <br />\n                    </div>\n                    {/* marks */}\n                    <span>\n                        <i>Required Total Marks: </i>\n                        <b>{selectTest && selectTest.totalMarks}</b>\n                    </span>\n                    <br />\n                    <span>\n                        <i>Questions Total Marks: </i>\n                        {/* IIFE */}\n                        <b>\n                            {(function () {\n                                let count = 0;\n                                questions.map(question => count = count + Number(question.marks));\n                                return count;\n                            }())}\n                        </b>\n                    </span>\n                </div>\n                {/* questions accordion */}\n                <div id=\"accordion\">\n                    {questions.length && questions.map((question, i) =>\n                        <div className=\"card shadow\" key={i}>\n                            {/* Accordion header */}\n                            <div className=\"card-header bg-dark text-white btn text-left\" id=\"headingOne\" data-target={`#${i}`} data-toggle=\"collapse\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                                <h5 className=\"my-2 p-2\">\n                                    {i + 1}) {question.question} <b>{question.marks ? `[${question.marks}]` : null}</b>\n                                </h5>\n                            </div>\n\n                            {/* Accordion Body */}\n                            <div id={i} className=\"collapse show\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n                                <div className=\"card-body bg-light\">\n                                    {/* input and delete question */}\n                                    <div className=\"d-flex\">\n                                        <input className=\"form-control w-75\" placeholder=\"Enter Question\" type=\"text\" required\n                                            value={question.question} onChange={(e) => questionChangeHandler(e, i)}\n                                        />\n                                        <input className=\"form-control w-25\" placeholder=\"Enter Marks\" type=\"number\" required\n                                            value={question.marks} onChange={(e) => marksChangeHandler(e, i)}\n                                        />\n                                        <button className=\"btn btn-danger ml-auto text-white\"\n                                            onClick={() => deleteQuestionHandler(i)}>\n                                            <i className=\"fas fa-trash\"></i>\n                                        </button>\n                                    </div>\n                                    <hr />\n                                    <div className=\"d-flex my-3\">\n                                        {/* map answers */}\n                                        {question.answers.map((answer, i2) =>\n                                            <div className=\"w-25\" key={i2}>\n                                                {/* checkbox */}\n                                                <span className=\"mr-2\">Correct</span>\n                                                <input type=\"checkbox\"\n                                                    checked={answer.correct}\n                                                    onChange={e => checkboxChangeHandler(i, i2, e)}\n                                                />\n                                                {/* answer input */}\n                                                <input className=\"form-control w-75\" placeholder=\"Enter Answer\" type=\"text\" required\n                                                    value={answer.answer} onChange={(e) => answerChangeHandler(i, i2, e)}\n                                                />\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {/* add question button */}\n                <div className=\"text-center\">\n                    <button className=\"btn btn-success p-3 text-white\" onClick={addQuestionHandler}>\n                        (+) Add Question\n                    </button>\n                </div>\n            </div>\n        </div>\n        {/* add question button */}\n        <div className=\"text-left\">\n            <button className=\"btn btn-primary p-3 text-white\" onClick={submitForm}>\n                Submit Form\n            </button>\n        </div>\n    </div>\n)","import fetch from \"./fetch\";\nimport { API } from \"../config/config\";\n\nexport const create = (questions) => {\n  return fetch(`${API}/question`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(questions),\n  })\n    .then((res) => {\n      return res.json();\n    })\n    .catch((err) => {\n      return err;\n    });\n};\n","import React, { useEffect, useState } from 'react'\n// layout\nimport AdminDashboardLayout from '../../layouts/admin-dashboard.layout'\n// components\nimport CreateQuestions from '../../component/admin/forms/questions.create'\n// actions\nimport { read } from '../../action/testAction'\nimport { create } from '../../action/questionAction'\n\nconst initialQuestionModel = {\n    question: \"\",\n    marks: '',\n    answers: [\n        {\n            answer: \"\",\n            correct: true\n        },\n        {\n            answer: \"\",\n            correct: false\n        },\n        {\n            answer: \"\",\n            correct: false\n        },\n    ]\n}\n\nexport default () => {\n    const [testList, setTestList] = useState([]);\n    const [selectTest, setSelectTest] = useState({});\n    const [questions, setQuestions] = useState([initialQuestionModel]);\n\n    // QUESTION ITERATION\n    const addQuestionHandler = () => setQuestions([...questions, initialQuestionModel]);\n    const marksChangeHandler = (e, questionIndex) => setQuestions(\n        questions.map((question, i) => {\n            if (i === questionIndex) {\n                return {\n                    ...question,\n                    marks: e.target.value\n                }\n            } else {\n                return question\n            }\n        })\n    );\n    const questionChangeHandler = (e, i) => {\n        setQuestions(questions.map((questionObj, i2) => {\n            if (i === i2) {\n                return {\n                    ...questionObj,\n                    question: e.target.value\n                }\n            } else {\n                return questionObj\n            }\n        }))\n    }\n    const deleteQuestionHandler = i => questions.length > 1 && setQuestions(questions.filter((q, index) => index !== i));\n    // ANSWER ITERATION\n    const answerChangeHandler = (questionIndex, answerIndex, e) => {\n        setQuestions(questions.map((question, i) => {\n            if (i === questionIndex) {\n                return {\n                    ...question,\n                    answers: question.answers.map((answer, i2) => {\n                        if (i2 === answerIndex) {\n                            return {\n                                ...answer,\n                                answer: e.target.value\n                            }\n                        } else {\n                            return answer;\n                        }\n                    })\n                }\n            } else {\n                return question\n            }\n        }))\n\n    }\n    // CHECKBOX ITERATION\n    const checkboxChangeHandler = (questionIndex, answerIndex, e) => {\n        if (e.target.checked) { // only if truthy, dont allow to uncheck\n            setQuestions(questions.map((question, i) => {\n                if (i === questionIndex) {\n                    return {\n                        ...question,\n                        answers: question.answers.map((answer, i2) => {\n                            if (i2 === answerIndex) {\n                                return {\n                                    ...answer,\n                                    correct: true\n                                }\n                            } else {\n                                return {\n                                    ...answer,\n                                    correct: false\n                                }\n                            }\n                        })\n                    }\n                } else {\n                    return question\n                }\n            }))\n        }\n    }\n    const submitForm = async e => {\n        e.preventDefault();\n        // validation\n        questions.map((question, i) => {\n            if (!question.question || !question.marks) {\n                return alert(`A Question field is empty on position: ${i + 1}`)\n            }\n            question.answers.map((answer, i2) => {\n                if (!answer.answer) {\n                    return alert(`An Answer field is empty on question: ${i + 1} and answer ${i2 + 1}`)\n                }\n            })\n        })\n        // IIFE\n        if (\n            (function () {\n            let count = 0;\n            questions.map(question => count = count + Number(question.marks));\n            return count;\n        }())\n         !==\n         selectTest.totalMarks)\n         {\n            return alert(`test total marks and question's marks are not equal`);\n        }\n        await create({ testId: selectTest.id, questions });\n        // reset fields\n        setQuestions([initialQuestionModel]);\n\n        alert('Submitted!');\n\n    }\n\n    useEffect(async () => {\n        const getAllTests = await read();\n        setTestList(getAllTests);\n        // select a default test\n        setSelectTest(getAllTests.length && getAllTests[0]);\n    }, [])\n\n    return (\n        <AdminDashboardLayout title={\"Questions and Answers\"}>\n                <CreateQuestions \n                    // test selection\n                    selectTest={selectTest}\n                    setSelectTest={setSelectTest}\n                    testList={testList}\n                    selectTest={selectTest}\n                    // create questions\n                    questions={questions}\n                    questionChangeHandler={questionChangeHandler}\n                    marksChangeHandler={marksChangeHandler}\n                    deleteQuestionHandler={deleteQuestionHandler}\n                    checkboxChangeHandler={checkboxChangeHandler}\n                    answerChangeHandler={answerChangeHandler}\n                    addQuestionHandler={addQuestionHandler}\n                    submitForm={submitForm}\n                />\n        </AdminDashboardLayout>\n    )\n}\n\n/* get test list\n    choose a test to create questions\n    create multiple answers for each question (limit 3)\n    set marks for each question\n\n    {\n        test_id: 1,\n        questions:[\n            {\n                question: 'what is computer'\n                answers: [\n                    {\n                        answer: 'electronic device',\n                        correct: true,\n                    },\n                    {\n                        answer: 'animal',\n                        correct: false,\n                    },\n                    {\n                        answer: tv,\n                        correct: false,\n                    }\n                ]\n            },\n            {\n                question: 'what is computer'\n                answers: [\n                    {\n                        answer: 'electronic device',\n                        correct: true,\n                    },\n                    {\n                        answer: 'animal',\n                        correct: false,\n                    },\n                    {\n                        answer: tv,\n                        correct: false,\n                    }\n                ]\n            },\n        ]\n    }\n*/","import React from 'react'\n// dashboard styles\n// import \"https://www.wrappixel.com/templates/ample-admin-lite/\"\nimport \"../assets/dashboard/plugins/images/favicon.png\"\nimport \"../assets/dashboard/plugins/bower_components/chartist/dist/chartist.min.css\"\nimport \"../assets/dashboard/plugins/bower_components/chartist-plugin-tooltips/dist/chartist-plugin-tooltip.css\"\nimport \"../assets/dashboard/css/style.min.css\"\n\nimport logo from '../assets/homepage/images/logo.png'\nimport { signout } from '../action/authAction'\nimport { withRouter, Link } from \"react-router-dom\";\n\nfunction DashboardLayout({ title, children, history }) {\n    return (\n        <div id=\"main-wrapper\" data-layout=\"vertical\" data-navbarbg=\"skin5\" data-sidebartype=\"full\"\n            data-sidebar-position=\"absolute\" data-header-position=\"absolute\" data-boxed-layout=\"full\">\n\n            <header className=\"topbar\" data-navbarbg=\"skin5\">\n                <nav className=\"navbar top-navbar navbar-expand-md navbar-dark\">\n                    <div className=\"navbar-header\" data-logobg=\"skin6\">\n                        <a className=\"navbar-brand\" href=\"/\">\n                            <b className=\"logo-icon\">\n                                <img src={logo} alt=\"homepage\" />\n                            </b>\n                        </a>\n                        <a className=\"nav-toggler waves-effect waves-light text-dark d-block d-md-none\"\n                            href=\"javascript:void(0)\"><i className=\"ti-menu ti-close\"></i></a>\n                    </div>\n                    <div className=\"navbar-collapse collapse\" id=\"navbarSupportedContent\" data-navbarbg=\"skin5\">\n                        <ul className=\"navbar-nav ms-auto d-flex align-items-center\">\n\n                            <li>\n                                <button className=\"btn text-white font-medium\" onClick={() => signout(() => history.push(\"/home\"))}>\n                                    <i className=\"fas fa-power-off mr-4\" aria-hidden=\"true\"></i>\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </header>\n\n            {/* sidebar */}\n            <aside className=\"left-sidebar\" data-sidebarbg=\"skin6\">\n                {/* <!-- Sidebar scroll--> */}\n                <div className=\"scroll-sidebar\">\n                    {/* <!-- Sidebar navigation--> */}\n                    <nav className=\"sidebar-nav\">\n                        <ul id=\"sidebarnav\">\n                            {/* dashboard */}\n                            <li className=\"sidebar-item pt-2\">\n                                <Link to='/admin/dashboard'>\n                                    <div className=\"sidebar-link waves-effect waves-dark sidebar-link\"\n                                        aria-expanded=\"false\">\n                                        <i className=\"far fa-clock\" aria-hidden=\"true\"></i>\n                                        <span className=\"hide-menu\">Dashboard</span>\n                                    </div>\n                                </Link>\n                            </li>\n                            {/* profile */}\n                            <li className=\"sidebar-item\">\n                                <Link to='/myprofile'>\n                                    <div className=\"sidebar-link waves-effect waves-dark sidebar-link\"\n                                        aria-expanded=\"false\">\n                                        <i className=\"fa fa-user\" aria-hidden=\"true\"></i>\n                                        <span className=\"hide-menu\">Profile</span>\n                                    </div>\n                                </Link>\n                            </li>\n                            {/* test */}\n                            <li className=\"sidebar-item\">\n                                <Link to='/admin/test'>\n                                    <div className=\"sidebar-link waves-effect waves-dark sidebar-link\"\n                                        aria-expanded=\"false\">\n                                        <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\n                                        <span className=\"hide-menu\">Tests</span>\n                                    </div>\n                                </Link>\n                            </li>\n                            {/* question */}\n                            <li className=\"sidebar-item\">\n                                <Link to='/admin/question'>\n                                    <div className=\"sidebar-link waves-effect waves-dark sidebar-link\"\n                                        aria-expanded=\"false\">\n                                        <i className=\"fa fa-table\" aria-hidden=\"true\"></i>\n                                        <span className=\"hide-menu\">Questions And Answers</span>\n                                    </div>\n                                </Link>\n                            </li>\n                            {/* result */}\n                            <li className=\"sidebar-item\">\n                                <Link to='/admin/test/results'>\n                                    <div className=\"sidebar-link waves-effect waves-dark sidebar-link\"\n                                        aria-expanded=\"false\">\n                                        <i className=\"fa fa-font\" aria-hidden=\"true\"></i>\n                                        <span className=\"hide-menu\">Results</span>\n                                    </div>\n                                </Link>\n                            </li>\n                        </ul>\n\n                    </nav>\n                </div>\n            </aside>\n\n            <div className=\"page-wrapper\">\n                {/* Bread crumb */}\n                <div className=\"page-breadcrumb bg-white\">\n                    <div className=\"row align-items-center\">\n                        <div className=\"col-lg-3 col-md-4 col-sm-4 col-xs-12\">\n                            <h4 className=\"page-title\">{title}</h4>\n                        </div>\n                        <div className=\"col-lg-9 col-sm-8 col-md-8 col-xs-12\">\n                            <div className=\"d-md-flex\">\n                                <ol className=\"breadcrumb ms-auto\">\n                                    <li><a href=\"#\" className=\"fw-normal\">{title}</a></li>\n                                </ol>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {/* dynamic component */}\n                <div className=\"container-fluid\">\n                    {children}\n                </div>\n                {/* footer */}\n                <footer className=\"footer text-center\"> TakeATest </footer>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(DashboardLayout)\n","import fetch from \"./fetch\";\nimport { API } from \"../config/config\";\n\nexport const create = (test) => {\n  return fetch(`${API}/test`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(test),\n  })\n    .then((res) => {\n      return res.json();\n    })\n    .catch((err) => {\n      return err;\n    });\n};\n\nexport const read = () => {\n  return fetch(`${API}/test`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(),\n  })\n    .then((res) => {\n      return res.json();\n    })\n    .catch((err) => {\n      return err;\n    });\n};\n\n//  for taking test\nexport const getTestQuestions = (testId) => {\n  return fetch(`${API}/test/${testId}/questions`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(),\n  })\n    .then((res) => {\n      return res.json();\n    })\n    .catch((err) => {\n      return err;\n    });\n};\n\n\nexport const destroy = (id) => {\n  return fetch(`${API}/test/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(),\n  })\n    .then((res) => {\n      return res.json();\n    })\n    .catch((err) => {\n      return err;\n    });\n};\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}